#!/usr/bin/env python3

from openstack import connection

import requests
import signal
import subprocess
import sys
import time

# Usage:
#
# Modify EMAIL and PASSWD.
#
# Invoke with `./dns.hook test yourdomain.tld` to test.
#
# Then copy/move to hooks dir of acmetool (e.g., /usr/lib/acme/hooks).


TIMEOUT = 60

username = "xxxxxxxxx"
password = "xxxxxxxxx"
userDomainId = "xxxxxxxxx"
auth_url = "https://iam.myhuaweicloud.com/v3"
projectId = "xxxxxxxxx"

# create connection
conn = connection.Connection(
    auth_url=auth_url,
    user_domain_id=userDomainId,
    username=username,
    password=password,
    project_id=projectId,
)

name_servers = [
    'ns1.hwclouds-dns.com',
    'ns1.hwclouds-dns.net'
]

def get_zone(zone_name):
    return conn.dns.find_zone(zone_name)

def get_domain_info(domain_name):
    try:
        zone = get_zone('%s.'%domain_name)
        if zone:
            return ('', zone)
    except:
        pass

    domain_name = domain_name.split('.')
    sub = domain_name[0]
    sub1, zone = get_domain_info('.'.join(domain_name[1:]))
    if sub1:
        sub = '%s.%s'%(sub, sub1)
    return sub, zone


def get_record_info(zone, sub_domain):
    record_name = challenge_record(zone, sub_domain, '')['name']

    records = conn.dns.recordsets(zone)

    for record in records:
        if record.name == record_name:
            return record

# Construct DNS challenge record.
def challenge_record(zone, sub_domain, token):
    ch = '_acme-challenge'
    if sub_domain:
        ch = '%s.%s'%(ch, sub_domain)

    name = '%s.%s'%(ch, zone.name)

    recordset = {
        "name": name,
        "description": "Acme auto challenge",
        "type": "TXT",
        "ttl": 300,
        "records": [
            '"%s"'%token
        ]
    }
    print(recordset)

    return recordset

# Create record.
def add_challenge(zone, sub_domain, token):
    return conn.dns.create_recordset(zone, **challenge_record(zone, sub_domain, token))

# Delete record.
def del_challenge(zone, recordset):
    return conn.dns.delete_recordset(zone, recordset)

# Timeout using SIGALARM.
# https://stackoverflow.com/a/22348885
class timeout:
    def __init__(self, seconds=1, error_message='Timeout'):
        self.seconds = seconds
        self.error_message = error_message
    def handle_timeout(self, signum, frame):
        raise TimeoutError(self.error_message)
    def __enter__(self):
        signal.signal(signal.SIGALRM, self.handle_timeout)
        signal.alarm(self.seconds)
    def __exit__(self, type, value, traceback):
        signal.alarm(0)

def wait_for_challenge_at(ns, vdomain, token, verbose=False):
    cmd = 'dig +short @{} txt {}'.format(ns, vdomain)
    while True:
        time.sleep(1)
        if verbose: print(cmd)
        output = subprocess.check_output(cmd, shell=True).decode()
        if token in output:
            return

# Wait for correct validation record to show up on all authoritative nameservers.
def wait_challenge(zone, sub_domain, token, verbose=False):
    vdomain = challenge_record(zone, sub_domain, token)['name']
    for ns in name_servers:
        wait_for_challenge_at(ns, vdomain, token, verbose)

def test(domain_name):
    print('Get domain info for:', domain_name)
    sub, zone = get_domain_info(domain_name)
    print(sub, zone)
    token = time.strftime('%Y%m%d %H:%M:%S')
    print('Using token:', token)
    print('Add record', challenge_record(zone, sub, token))
    record = add_challenge(zone, sub, token)
    print(record)
    print('Add record ok')
    try:
        print('Wait for record')
        with timeout(TIMEOUT):
            wait_challenge(zone, sub, token, verbose=True)
        print('Record is on all nameservers')
    finally:
        print('Delete record')
        del_challenge(zone, record)
        print('Delete record ok')

def main():
    if sys.argv[1] == 'test':
        test(sys.argv[2])
    elif sys.argv[1] == 'challenge-dns-start':
        domain = sys.argv[2]
        token = sys.argv[4]
        sub, zone = get_domain_info(domain)
        record = add_challenge(zone, sub, token)
        try:
            with timeout(TIMEOUT):
                wait_challenge(zone, sub, token)
        except:
            del_challenge(zone, record)
            raise
    elif sys.argv[1] == 'challenge-dns-stop':
        domain = sys.argv[2]
        token = sys.argv[4]
        sub, zone = get_domain_info(domain)
        record = get_record_info(zone, sub)
        del_challenge(zone, record)
    else:
        sys.exit(42)

if __name__ == '__main__':
    main()
